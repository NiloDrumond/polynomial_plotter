(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: main, setup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main\", function() { return main; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setup\", function() { return setup; });\n// If you only use `npm` you can simply\n// import { Chart } from \"wasm-demo\" and remove `setup` call from `bootstrap.js`.\nclass Chart { }\n\nconst canvas = document.getElementById(\"canvas\");\nconst coord = document.getElementById(\"coord\");\nconst status = document.getElementById(\"status\");\nconst coefficients = document.getElementById(\"coefficients\");\nconst addCoefficient = document.getElementById(\"add-coe\");\nconst generate = document.getElementById(\"generate\");\n\nlet chart = null;\nlet prevCoe = undefined;\n\n/** Main entry point */\nfunction main() {\n  setupUI();\n  setupCanvas();\n\n  spawnCoefficient();\n  spawnCoefficient();\n  spawnCoefficient();\n}\n\n/** This function is used in `bootstrap.js` to setup imports. */\nfunction setup(WasmChart) {\n  Chart = WasmChart;\n}\n\n/** Add event listeners. */\nfunction setupUI() {\n  status.innerText = \"WebAssembly loaded!\";\n  addCoefficient.addEventListener(\"click\", spawnCoefficient)\n  window.addEventListener(\"resize\", setupCanvas);\n  window.addEventListener(\"mousemove\", onMouseMove);\n  generate.addEventListener(\"click\", updatePlot);\n}\n\n/** Setup canvas to properly handle high DPI and redraw current plot. */\nfunction setupCanvas() {\n\n  const dpr = window.devicePixelRatio || 1.0;\n  const aspectRatio = canvas.width / canvas.height;\n  const size = canvas.parentNode.offsetWidth * 0.8;\n  canvas.style.width = size + \"px\";\n  canvas.style.height = size / aspectRatio + \"px\";\n  canvas.width = size;\n  canvas.height = size / aspectRatio;\n  updatePlot();\n}\n\n/** Update displayed coordinates. */\nfunction onMouseMove(event) {\n  if (chart) {\n    var text = \"Mouse pointer is out of range\";\n\n    if (event.target == canvas) {\n      let actualRect = canvas.getBoundingClientRect();\n      let logicX = event.offsetX * canvas.width / actualRect.width;\n      let logicY = event.offsetY * canvas.height / actualRect.height;\n      const point = chart.coord(logicX, logicY);\n      text = (point)\n        ? `(${point.x.toFixed(3)}, ${point.y.toFixed(3)})`\n        : text;\n    }\n    coord.innerText = text;\n  }\n}\n\n/** Redraw currently selected plot. */\nfunction updatePlot() {\n  let inputs = document.querySelectorAll('.coe');\n  let values = Array.from(inputs).map((input) => Number(input.value));\n  if (values.length === 0) return;\n\n  status.innerText = 'Rendering...';\n  chart = null;\n  const start = performance.now();\n  chart = Chart.polynomial(canvas, values, prevCoe);\n  const end = performance.now();\n  prevCoe = values;\n  status.innerText = `Rendered in ${Math.ceil(end - start)}ms`;\n}\n\nfunction spawnCoefficient() {\n  let container = document.createElement(\"div\");\n  let input = document.createElement(\"input\");\n  let button = document.createElement(\"button\");\n  input.classList.add(\"coe\")\n  button.innerText = \"x\"\n  container.appendChild(input)\n  container.appendChild(button)\n  button.addEventListener(\"click\", () => {\n    container.remove();\n  })\n\n  coefficients.appendChild(container)\n}\n\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);